package ru.rdtex.mvd.weapon.model.en;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 14 13:57:42 MSD 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DocDocumentsImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(DocDocumentsImpl obj) {
                return obj.getId();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setId((Number)value);
            }
        }
        ,
        State {
            public Object get(DocDocumentsImpl obj) {
                return obj.getState();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setState((Number)value);
            }
        }
        ,
        Inserted {
            public Object get(DocDocumentsImpl obj) {
                return obj.getInserted();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setInserted((Date)value);
            }
        }
        ,
        InsertedBy {
            public Object get(DocDocumentsImpl obj) {
                return obj.getInsertedBy();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setInsertedBy((Number)value);
            }
        }
        ,
        Updated {
            public Object get(DocDocumentsImpl obj) {
                return obj.getUpdated();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setUpdated((Date)value);
            }
        }
        ,
        UpdatedBy {
            public Object get(DocDocumentsImpl obj) {
                return obj.getUpdatedBy();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setUpdatedBy((Number)value);
            }
        }
        ,
        DocName {
            public Object get(DocDocumentsImpl obj) {
                return obj.getDocName();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setDocName((String)value);
            }
        }
        ,
        DocNumb {
            public Object get(DocDocumentsImpl obj) {
                return obj.getDocNumb();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setDocNumb((String)value);
            }
        }
        ,
        DocSeries {
            public Object get(DocDocumentsImpl obj) {
                return obj.getDocSeries();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setDocSeries((String)value);
            }
        }
        ,
        DocDate {
            public Object get(DocDocumentsImpl obj) {
                return obj.getDocDate();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setDocDate((Date)value);
            }
        }
        ,
        DdcId {
            public Object get(DocDocumentsImpl obj) {
                return obj.getDdcId();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setDdcId((Number)value);
            }
        }
        ,
        Department {
            public Object get(DocDocumentsImpl obj) {
                return obj.getDepartment();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setDepartment((String)value);
            }
        }
        ,
        DocType {
            public Object get(DocDocumentsImpl obj) {
                return obj.getDocType();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setDocType((Number)value);
            }
        }
        ,
        Comments {
            public Object get(DocDocumentsImpl obj) {
                return obj.getComments();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setComments((String)value);
            }
        }
        ,
        UpdatedFlag {
            public Object get(DocDocumentsImpl obj) {
                return obj.getUpdatedFlag();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setUpdatedFlag((Number)value);
            }
        }
        ,
        FlagVb {
            public Object get(DocDocumentsImpl obj) {
                return obj.getFlagVb();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setFlagVb((Number)value);
            }
        }
        ,
        FlagSv {
            public Object get(DocDocumentsImpl obj) {
                return obj.getFlagSv();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setFlagSv((Number)value);
            }
        }
        ,
        Wh {
            public Object get(DocDocumentsImpl obj) {
                return obj.getWh();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setWh((String)value);
            }
        }
        ,
        EpId {
            public Object get(DocDocumentsImpl obj) {
                return obj.getEpId();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setEpId((Number)value);
            }
        }
        ,
        ObjLow {
            public Object get(DocDocumentsImpl obj) {
                return obj.getObjLow();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setObjLow((String)value);
            }
        }
        ,
        HashValue {
            public Object get(DocDocumentsImpl obj) {
                return obj.getHashValue();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setHashValue((Number)value);
            }
        }
        ,
        OldStatus {
            public Object get(DocDocumentsImpl obj) {
                return obj.getOldStatus();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setOldStatus((Number)value);
            }
        }
        ,
        CompareStatus {
            public Object get(DocDocumentsImpl obj) {
                return obj.getCompareStatus();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setCompareStatus((Number)value);
            }
        }
        ,
        CompareDate {
            public Object get(DocDocumentsImpl obj) {
                return obj.getCompareDate();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setCompareDate((Date)value);
            }
        }
        ,
        ObjId {
            public Object get(DocDocumentsImpl obj) {
                return obj.getObjId();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setObjId((Number)value);
            }
        }
        ,
        DocDocuments {
            public Object get(DocDocumentsImpl obj) {
                return obj.getDocDocuments();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        DdcIdDocDocuments {
            public Object get(DocDocumentsImpl obj) {
                return obj.getDdcIdDocDocuments();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setDdcIdDocDocuments((DocDocumentsImpl)value);
            }
        }
        ,
        DocDocumentsDocRelations {
            public Object get(DocDocumentsImpl obj) {
                return obj.getDocDocumentsDocRelations();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        DocRequests {
            public Object get(DocDocumentsImpl obj) {
                return obj.getDocRequests();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setDocRequests((DocRequestsImpl)value);
            }
        }
        ,
        DocPermissions {
            public Object get(DocDocumentsImpl obj) {
                return obj.getDocPermissions();
            }

            public void put(DocDocumentsImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(DocDocumentsImpl object);

        public abstract void put(DocDocumentsImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int ID = AttributesEnum.Id.index();
    public static final int STATE = AttributesEnum.State.index();
    public static final int INSERTED = AttributesEnum.Inserted.index();
    public static final int INSERTEDBY = AttributesEnum.InsertedBy.index();
    public static final int UPDATED = AttributesEnum.Updated.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int DOCNAME = AttributesEnum.DocName.index();
    public static final int DOCNUMB = AttributesEnum.DocNumb.index();
    public static final int DOCSERIES = AttributesEnum.DocSeries.index();
    public static final int DOCDATE = AttributesEnum.DocDate.index();
    public static final int DDCID = AttributesEnum.DdcId.index();
    public static final int DEPARTMENT = AttributesEnum.Department.index();
    public static final int DOCTYPE = AttributesEnum.DocType.index();
    public static final int COMMENTS = AttributesEnum.Comments.index();
    public static final int UPDATEDFLAG = AttributesEnum.UpdatedFlag.index();
    public static final int FLAGVB = AttributesEnum.FlagVb.index();
    public static final int FLAGSV = AttributesEnum.FlagSv.index();
    public static final int WH = AttributesEnum.Wh.index();
    public static final int EPID = AttributesEnum.EpId.index();
    public static final int OBJLOW = AttributesEnum.ObjLow.index();
    public static final int HASHVALUE = AttributesEnum.HashValue.index();
    public static final int OLDSTATUS = AttributesEnum.OldStatus.index();
    public static final int COMPARESTATUS = AttributesEnum.CompareStatus.index();
    public static final int COMPAREDATE = AttributesEnum.CompareDate.index();
    public static final int OBJID = AttributesEnum.ObjId.index();
    public static final int DOCDOCUMENTS = AttributesEnum.DocDocuments.index();
    public static final int DDCIDDOCDOCUMENTS = AttributesEnum.DdcIdDocDocuments.index();
    public static final int DOCDOCUMENTSDOCRELATIONS = AttributesEnum.DocDocumentsDocRelations.index();
    public static final int DOCREQUESTS = AttributesEnum.DocRequests.index();
    public static final int DOCPERMISSIONS = AttributesEnum.DocPermissions.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DocDocumentsImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("ru.rdtex.mvd.weapon.model.en.DocDocuments");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the Id
     */
    public Number getId() {
        return (Number)getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(Number value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for State, using the alias name State.
     * @return the State
     */
    public Number getState() {
        return (Number)getAttributeInternal(STATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for State.
     * @param value value to set the State
     */
    public void setState(Number value) {
        setAttributeInternal(STATE, value);
    }

    /**
     * Gets the attribute value for Inserted, using the alias name Inserted.
     * @return the Inserted
     */
    public Date getInserted() {
        return (Date)getAttributeInternal(INSERTED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Inserted.
     * @param value value to set the Inserted
     */
    public void setInserted(Date value) {
        setAttributeInternal(INSERTED, value);
    }

    /**
     * Gets the attribute value for InsertedBy, using the alias name InsertedBy.
     * @return the InsertedBy
     */
    public Number getInsertedBy() {
        return (Number)getAttributeInternal(INSERTEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for InsertedBy.
     * @param value value to set the InsertedBy
     */
    public void setInsertedBy(Number value) {
        setAttributeInternal(INSERTEDBY, value);
    }

    /**
     * Gets the attribute value for Updated, using the alias name Updated.
     * @return the Updated
     */
    public Date getUpdated() {
        return (Date)getAttributeInternal(UPDATED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Updated.
     * @param value value to set the Updated
     */
    public void setUpdated(Date value) {
        setAttributeInternal(UPDATED, value);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the UpdatedBy
     */
    public Number getUpdatedBy() {
        return (Number)getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(Number value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for DocName, using the alias name DocName.
     * @return the DocName
     */
    public String getDocName() {
        return (String)getAttributeInternal(DOCNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocName.
     * @param value value to set the DocName
     */
    public void setDocName(String value) {
        setAttributeInternal(DOCNAME, value);
    }

    /**
     * Gets the attribute value for DocNumb, using the alias name DocNumb.
     * @return the DocNumb
     */
    public String getDocNumb() {
        return (String)getAttributeInternal(DOCNUMB);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocNumb.
     * @param value value to set the DocNumb
     */
    public void setDocNumb(String value) {
        setAttributeInternal(DOCNUMB, value);
    }

    /**
     * Gets the attribute value for DocSeries, using the alias name DocSeries.
     * @return the DocSeries
     */
    public String getDocSeries() {
        return (String)getAttributeInternal(DOCSERIES);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocSeries.
     * @param value value to set the DocSeries
     */
    public void setDocSeries(String value) {
        setAttributeInternal(DOCSERIES, value);
    }

    /**
     * Gets the attribute value for DocDate, using the alias name DocDate.
     * @return the DocDate
     */
    public Date getDocDate() {
        return (Date)getAttributeInternal(DOCDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocDate.
     * @param value value to set the DocDate
     */
    public void setDocDate(Date value) {
        setAttributeInternal(DOCDATE, value);
    }

    /**
     * Gets the attribute value for DdcId, using the alias name DdcId.
     * @return the DdcId
     */
    public Number getDdcId() {
        return (Number)getAttributeInternal(DDCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DdcId.
     * @param value value to set the DdcId
     */
    public void setDdcId(Number value) {
        setAttributeInternal(DDCID, value);
    }

    /**
     * Gets the attribute value for Department, using the alias name Department.
     * @return the Department
     */
    public String getDepartment() {
        return (String)getAttributeInternal(DEPARTMENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Department.
     * @param value value to set the Department
     */
    public void setDepartment(String value) {
        setAttributeInternal(DEPARTMENT, value);
    }

    /**
     * Gets the attribute value for DocType, using the alias name DocType.
     * @return the DocType
     */
    public Number getDocType() {
        return (Number)getAttributeInternal(DOCTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocType.
     * @param value value to set the DocType
     */
    public void setDocType(Number value) {
        setAttributeInternal(DOCTYPE, value);
    }

    /**
     * Gets the attribute value for Comments, using the alias name Comments.
     * @return the Comments
     */
    public String getComments() {
        return (String)getAttributeInternal(COMMENTS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Comments.
     * @param value value to set the Comments
     */
    public void setComments(String value) {
        setAttributeInternal(COMMENTS, value);
    }

    /**
     * Gets the attribute value for UpdatedFlag, using the alias name UpdatedFlag.
     * @return the UpdatedFlag
     */
    public Number getUpdatedFlag() {
        return (Number)getAttributeInternal(UPDATEDFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedFlag.
     * @param value value to set the UpdatedFlag
     */
    public void setUpdatedFlag(Number value) {
        setAttributeInternal(UPDATEDFLAG, value);
    }

    /**
     * Gets the attribute value for FlagVb, using the alias name FlagVb.
     * @return the FlagVb
     */
    public Number getFlagVb() {
        return (Number)getAttributeInternal(FLAGVB);
    }

    /**
     * Sets <code>value</code> as the attribute value for FlagVb.
     * @param value value to set the FlagVb
     */
    public void setFlagVb(Number value) {
        setAttributeInternal(FLAGVB, value);
    }

    /**
     * Gets the attribute value for FlagSv, using the alias name FlagSv.
     * @return the FlagSv
     */
    public Number getFlagSv() {
        return (Number)getAttributeInternal(FLAGSV);
    }

    /**
     * Sets <code>value</code> as the attribute value for FlagSv.
     * @param value value to set the FlagSv
     */
    public void setFlagSv(Number value) {
        setAttributeInternal(FLAGSV, value);
    }

    /**
     * Gets the attribute value for Wh, using the alias name Wh.
     * @return the Wh
     */
    public String getWh() {
        return (String)getAttributeInternal(WH);
    }

    /**
     * Sets <code>value</code> as the attribute value for Wh.
     * @param value value to set the Wh
     */
    public void setWh(String value) {
        setAttributeInternal(WH, value);
    }

    /**
     * Gets the attribute value for EpId, using the alias name EpId.
     * @return the EpId
     */
    public Number getEpId() {
        return (Number)getAttributeInternal(EPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EpId.
     * @param value value to set the EpId
     */
    public void setEpId(Number value) {
        setAttributeInternal(EPID, value);
    }

    /**
     * Gets the attribute value for ObjLow, using the alias name ObjLow.
     * @return the ObjLow
     */
    public String getObjLow() {
        return (String)getAttributeInternal(OBJLOW);
    }

    /**
     * Sets <code>value</code> as the attribute value for ObjLow.
     * @param value value to set the ObjLow
     */
    public void setObjLow(String value) {
        setAttributeInternal(OBJLOW, value);
    }

    /**
     * Gets the attribute value for HashValue, using the alias name HashValue.
     * @return the HashValue
     */
    public Number getHashValue() {
        return (Number)getAttributeInternal(HASHVALUE);
    }

    /**
     * Sets <code>value</code> as the attribute value for HashValue.
     * @param value value to set the HashValue
     */
    public void setHashValue(Number value) {
        setAttributeInternal(HASHVALUE, value);
    }

    /**
     * Gets the attribute value for OldStatus, using the alias name OldStatus.
     * @return the OldStatus
     */
    public Number getOldStatus() {
        return (Number)getAttributeInternal(OLDSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for OldStatus.
     * @param value value to set the OldStatus
     */
    public void setOldStatus(Number value) {
        setAttributeInternal(OLDSTATUS, value);
    }

    /**
     * Gets the attribute value for CompareStatus, using the alias name CompareStatus.
     * @return the CompareStatus
     */
    public Number getCompareStatus() {
        return (Number)getAttributeInternal(COMPARESTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for CompareStatus.
     * @param value value to set the CompareStatus
     */
    public void setCompareStatus(Number value) {
        setAttributeInternal(COMPARESTATUS, value);
    }

    /**
     * Gets the attribute value for CompareDate, using the alias name CompareDate.
     * @return the CompareDate
     */
    public Date getCompareDate() {
        return (Date)getAttributeInternal(COMPAREDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CompareDate.
     * @param value value to set the CompareDate
     */
    public void setCompareDate(Date value) {
        setAttributeInternal(COMPAREDATE, value);
    }

    /**
     * Gets the attribute value for ObjId, using the alias name ObjId.
     * @return the ObjId
     */
    public Number getObjId() {
        return (Number)getAttributeInternal(OBJID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ObjId.
     * @param value value to set the ObjId
     */
    public void setObjId(Number value) {
        setAttributeInternal(OBJID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getDocDocuments() {
        return (RowIterator)getAttributeInternal(DOCDOCUMENTS);
    }

    /**
     * @return the associated entity DocDocumentsImpl.
     */
    public DocDocumentsImpl getDdcIdDocDocuments() {
        return (DocDocumentsImpl)getAttributeInternal(DDCIDDOCDOCUMENTS);
    }

    /**
     * Sets <code>value</code> as the associated entity DocDocumentsImpl.
     */
    public void setDdcIdDocDocuments(DocDocumentsImpl value) {
        setAttributeInternal(DDCIDDOCDOCUMENTS, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getDocDocumentsDocRelations() {
        return (RowIterator)getAttributeInternal(DOCDOCUMENTSDOCRELATIONS);
    }


    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public DocRequestsImpl getDocRequests() {
        return (DocRequestsImpl)getAttributeInternal(DOCREQUESTS);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setDocRequests(DocRequestsImpl value) {
        setAttributeInternal(DOCREQUESTS, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getDocPermissions() {
        return (RowIterator)getAttributeInternal(DOCPERMISSIONS);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number id) {
        return new Key(new Object[]{id});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl seq = new SequenceImpl("DOC_SEQ", getDBTransaction());
        setId(seq.getSequenceNumber());
    }
}
